/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ProtectedRouteImport } from './routes/_protected'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as AuthIndexRouteImport } from './routes/_auth/index'
import { Route as ProtectedBuildsRouteImport } from './routes/_protected/builds'
import { Route as AuthSignupRouteImport } from './routes/_auth/signup'
import { Route as AuthLoginRouteImport } from './routes/_auth/login'
import { Route as AuthForgotPasswordRouteImport } from './routes/_auth/forgot-password'
import { Route as AuthConfirmRouteImport } from './routes/_auth/confirm'
import { Route as AdminDumpRouteImport } from './routes/_admin.dump'
import { Route as ProtectedBuildsUserProfileRouteImport } from './routes/_protected/builds/user/profile'
import { Route as ProtectedBuildsUserPasswordRouteImport } from './routes/_protected/builds/user/password'
import { Route as ProtectedBuildsUserLogoutRouteImport } from './routes/_protected/builds/user/logout'
import { Route as ProtectedBuildsUserEmailRouteImport } from './routes/_protected/builds/user/email'
import { Route as ProtectedBuildsUserDeleteRouteImport } from './routes/_protected/builds/user/delete'

const ProtectedRoute = ProtectedRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthIndexRoute = AuthIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthRoute,
} as any)
const ProtectedBuildsRoute = ProtectedBuildsRouteImport.update({
  id: '/builds',
  path: '/builds',
  getParentRoute: () => ProtectedRoute,
} as any)
const AuthSignupRoute = AuthSignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => AuthRoute,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRoute,
} as any)
const AuthForgotPasswordRoute = AuthForgotPasswordRouteImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => AuthRoute,
} as any)
const AuthConfirmRoute = AuthConfirmRouteImport.update({
  id: '/confirm',
  path: '/confirm',
  getParentRoute: () => AuthRoute,
} as any)
const AdminDumpRoute = AdminDumpRouteImport.update({
  id: '/_admin/dump',
  path: '/dump',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedBuildsUserProfileRoute =
  ProtectedBuildsUserProfileRouteImport.update({
    id: '/user/profile',
    path: '/user/profile',
    getParentRoute: () => ProtectedBuildsRoute,
  } as any)
const ProtectedBuildsUserPasswordRoute =
  ProtectedBuildsUserPasswordRouteImport.update({
    id: '/user/password',
    path: '/user/password',
    getParentRoute: () => ProtectedBuildsRoute,
  } as any)
const ProtectedBuildsUserLogoutRoute =
  ProtectedBuildsUserLogoutRouteImport.update({
    id: '/user/logout',
    path: '/user/logout',
    getParentRoute: () => ProtectedBuildsRoute,
  } as any)
const ProtectedBuildsUserEmailRoute =
  ProtectedBuildsUserEmailRouteImport.update({
    id: '/user/email',
    path: '/user/email',
    getParentRoute: () => ProtectedBuildsRoute,
  } as any)
const ProtectedBuildsUserDeleteRoute =
  ProtectedBuildsUserDeleteRouteImport.update({
    id: '/user/delete',
    path: '/user/delete',
    getParentRoute: () => ProtectedBuildsRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/dump': typeof AdminDumpRoute
  '/confirm': typeof AuthConfirmRoute
  '/forgot-password': typeof AuthForgotPasswordRoute
  '/login': typeof AuthLoginRoute
  '/signup': typeof AuthSignupRoute
  '/builds': typeof ProtectedBuildsRouteWithChildren
  '/': typeof AuthIndexRoute
  '/builds/user/delete': typeof ProtectedBuildsUserDeleteRoute
  '/builds/user/email': typeof ProtectedBuildsUserEmailRoute
  '/builds/user/logout': typeof ProtectedBuildsUserLogoutRoute
  '/builds/user/password': typeof ProtectedBuildsUserPasswordRoute
  '/builds/user/profile': typeof ProtectedBuildsUserProfileRoute
}
export interface FileRoutesByTo {
  '/dump': typeof AdminDumpRoute
  '/confirm': typeof AuthConfirmRoute
  '/forgot-password': typeof AuthForgotPasswordRoute
  '/login': typeof AuthLoginRoute
  '/signup': typeof AuthSignupRoute
  '/builds': typeof ProtectedBuildsRouteWithChildren
  '/': typeof AuthIndexRoute
  '/builds/user/delete': typeof ProtectedBuildsUserDeleteRoute
  '/builds/user/email': typeof ProtectedBuildsUserEmailRoute
  '/builds/user/logout': typeof ProtectedBuildsUserLogoutRoute
  '/builds/user/password': typeof ProtectedBuildsUserPasswordRoute
  '/builds/user/profile': typeof ProtectedBuildsUserProfileRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_auth': typeof AuthRouteWithChildren
  '/_protected': typeof ProtectedRouteWithChildren
  '/_admin/dump': typeof AdminDumpRoute
  '/_auth/confirm': typeof AuthConfirmRoute
  '/_auth/forgot-password': typeof AuthForgotPasswordRoute
  '/_auth/login': typeof AuthLoginRoute
  '/_auth/signup': typeof AuthSignupRoute
  '/_protected/builds': typeof ProtectedBuildsRouteWithChildren
  '/_auth/': typeof AuthIndexRoute
  '/_protected/builds/user/delete': typeof ProtectedBuildsUserDeleteRoute
  '/_protected/builds/user/email': typeof ProtectedBuildsUserEmailRoute
  '/_protected/builds/user/logout': typeof ProtectedBuildsUserLogoutRoute
  '/_protected/builds/user/password': typeof ProtectedBuildsUserPasswordRoute
  '/_protected/builds/user/profile': typeof ProtectedBuildsUserProfileRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/dump'
    | '/confirm'
    | '/forgot-password'
    | '/login'
    | '/signup'
    | '/builds'
    | '/'
    | '/builds/user/delete'
    | '/builds/user/email'
    | '/builds/user/logout'
    | '/builds/user/password'
    | '/builds/user/profile'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/dump'
    | '/confirm'
    | '/forgot-password'
    | '/login'
    | '/signup'
    | '/builds'
    | '/'
    | '/builds/user/delete'
    | '/builds/user/email'
    | '/builds/user/logout'
    | '/builds/user/password'
    | '/builds/user/profile'
  id:
    | '__root__'
    | '/_auth'
    | '/_protected'
    | '/_admin/dump'
    | '/_auth/confirm'
    | '/_auth/forgot-password'
    | '/_auth/login'
    | '/_auth/signup'
    | '/_protected/builds'
    | '/_auth/'
    | '/_protected/builds/user/delete'
    | '/_protected/builds/user/email'
    | '/_protected/builds/user/logout'
    | '/_protected/builds/user/password'
    | '/_protected/builds/user/profile'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthRoute: typeof AuthRouteWithChildren
  ProtectedRoute: typeof ProtectedRouteWithChildren
  AdminDumpRoute: typeof AdminDumpRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/': {
      id: '/_auth/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthIndexRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_protected/builds': {
      id: '/_protected/builds'
      path: '/builds'
      fullPath: '/builds'
      preLoaderRoute: typeof ProtectedBuildsRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_auth/signup': {
      id: '/_auth/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof AuthSignupRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/forgot-password': {
      id: '/_auth/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof AuthForgotPasswordRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/confirm': {
      id: '/_auth/confirm'
      path: '/confirm'
      fullPath: '/confirm'
      preLoaderRoute: typeof AuthConfirmRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_admin/dump': {
      id: '/_admin/dump'
      path: '/dump'
      fullPath: '/dump'
      preLoaderRoute: typeof AdminDumpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/builds/user/profile': {
      id: '/_protected/builds/user/profile'
      path: '/user/profile'
      fullPath: '/builds/user/profile'
      preLoaderRoute: typeof ProtectedBuildsUserProfileRouteImport
      parentRoute: typeof ProtectedBuildsRoute
    }
    '/_protected/builds/user/password': {
      id: '/_protected/builds/user/password'
      path: '/user/password'
      fullPath: '/builds/user/password'
      preLoaderRoute: typeof ProtectedBuildsUserPasswordRouteImport
      parentRoute: typeof ProtectedBuildsRoute
    }
    '/_protected/builds/user/logout': {
      id: '/_protected/builds/user/logout'
      path: '/user/logout'
      fullPath: '/builds/user/logout'
      preLoaderRoute: typeof ProtectedBuildsUserLogoutRouteImport
      parentRoute: typeof ProtectedBuildsRoute
    }
    '/_protected/builds/user/email': {
      id: '/_protected/builds/user/email'
      path: '/user/email'
      fullPath: '/builds/user/email'
      preLoaderRoute: typeof ProtectedBuildsUserEmailRouteImport
      parentRoute: typeof ProtectedBuildsRoute
    }
    '/_protected/builds/user/delete': {
      id: '/_protected/builds/user/delete'
      path: '/user/delete'
      fullPath: '/builds/user/delete'
      preLoaderRoute: typeof ProtectedBuildsUserDeleteRouteImport
      parentRoute: typeof ProtectedBuildsRoute
    }
  }
}

interface AuthRouteChildren {
  AuthConfirmRoute: typeof AuthConfirmRoute
  AuthForgotPasswordRoute: typeof AuthForgotPasswordRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthSignupRoute: typeof AuthSignupRoute
  AuthIndexRoute: typeof AuthIndexRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthConfirmRoute: AuthConfirmRoute,
  AuthForgotPasswordRoute: AuthForgotPasswordRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthSignupRoute: AuthSignupRoute,
  AuthIndexRoute: AuthIndexRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface ProtectedBuildsRouteChildren {
  ProtectedBuildsUserDeleteRoute: typeof ProtectedBuildsUserDeleteRoute
  ProtectedBuildsUserEmailRoute: typeof ProtectedBuildsUserEmailRoute
  ProtectedBuildsUserLogoutRoute: typeof ProtectedBuildsUserLogoutRoute
  ProtectedBuildsUserPasswordRoute: typeof ProtectedBuildsUserPasswordRoute
  ProtectedBuildsUserProfileRoute: typeof ProtectedBuildsUserProfileRoute
}

const ProtectedBuildsRouteChildren: ProtectedBuildsRouteChildren = {
  ProtectedBuildsUserDeleteRoute: ProtectedBuildsUserDeleteRoute,
  ProtectedBuildsUserEmailRoute: ProtectedBuildsUserEmailRoute,
  ProtectedBuildsUserLogoutRoute: ProtectedBuildsUserLogoutRoute,
  ProtectedBuildsUserPasswordRoute: ProtectedBuildsUserPasswordRoute,
  ProtectedBuildsUserProfileRoute: ProtectedBuildsUserProfileRoute,
}

const ProtectedBuildsRouteWithChildren = ProtectedBuildsRoute._addFileChildren(
  ProtectedBuildsRouteChildren,
)

interface ProtectedRouteChildren {
  ProtectedBuildsRoute: typeof ProtectedBuildsRouteWithChildren
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedBuildsRoute: ProtectedBuildsRouteWithChildren,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRouteWithChildren,
  ProtectedRoute: ProtectedRouteWithChildren,
  AdminDumpRoute: AdminDumpRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
